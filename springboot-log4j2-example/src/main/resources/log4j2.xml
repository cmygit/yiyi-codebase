<?xml version="1.0" encoding="utf-8" ?>
<!-- status：设置log4j2自身内部的信息输出-->
<!-- monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置值为自动检测间隔秒数-->
<configuration stats="warn" monitorInterval="30">
    <!-- 日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <!-- 变量配置 -->
    <properties>
        <!-- %d : 日志生产时间,输出到毫秒的时间 %d{yyyy-MM-dd HH:mm:ss, SSS}表示时间格式化，如2020-02-23 13:14:55.678 -->
        <!-- %p : 输出日志级别，%5p表示右对齐并且固定输出5个字符，不足位在左边补空格 -->
        <!-- %t : 输出当前线程名称 %10.10t表示右对齐并且固定输出10个字符，不足位在左边补空，若超过10位则保留最后10位 -->
        <!-- %m : 日志内容，即 logger.info("message")的message -->
        <!-- %n : 换行符 -->
        <!-- %c : 输出日志的类名，%-40.40c{1.}表示左对齐并且固定输出40个字符，超出长度则保留最后40个字符。{1.}表示精度，类限定名前面的部分每个部分只输出首位字符，如org.example.Demo -> o.e.Demo -->
        <!-- %L : 输出日志处的所在行号 -->
        <!-- %M : 方法名 -->
        <!-- %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数 -->
        <property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %5p --- [%10.10t] %40.40c{1.}(%4L) : %m%n</property>
        <property name="CHARSET">UTF-8</property>
        <!-- 定义日志存储的路径 -->
        <property name="LOG_PATH" value="logs" />
        <property name="LOG_NAME" value="demo" />
        <!-- 归档间隔 -->
        <property name="ROLLING_INTERVAL" value="1" />
        <property name="LOG_FILE_MAX_SIZE" value="10MB" />
        <property name="LOG_FILE_MAX_COUNT" value="20" />
    </properties>

    <!-- 输出源 -->
    <appenders>
        <!-- 控制台输出 -->
        <console name="console" target="SYSTEM_OUT" follow="true">
            <patternLayout charset="${CHARSET}" pattern="${LOG_PATTERN}" />
        </console>

        <!-- 自动归档（滚动）日志文件输出 -->
        <!-- fileName 日志文件名；filePattern 归档日志文件名格式，文件名中的.gz后缀用于压缩日志文件 -->
        <rollingRandomAccessFile name="rollingInfoFile" fileName="${LOG_PATH}/info.log" filePattern="${LOG_PATH}/info/${LOG_NAME}-info-%d{yyyy-MM-dd}_%i.log.gz">
            <!--只接收level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <patternLayout charset="${CHARSET}" pattern="${LOG_PATTERN}" />
            <!-- 归档策略 可配置多种归档策略，同时生效 -->
            <Policies>
                <!-- 启动时归档一次 -->
                <OnStartupTriggeringPolicy />
                <!-- 基于时间归档，间隔为interval，单位为filePattern中指定的精度，比如interval为1，filePattern为yyyy-MM-dd，表示按每天归档一次 -->
                <TimeBasedTriggeringPolicy interval="${ROLLING_INTERVAL}"/>
                <!-- 基于日志文件大小归档，超过size就归档一次 -->
                <SizeBasedTriggeringPolicy size="${LOG_FILE_MAX_SIZE}"/>
            </Policies>
            <!-- 归档文件夹下最大日志文件数量，如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="${LOG_FILE_MAX_COUNT}"/>
        </rollingRandomAccessFile>

        <!-- 自动归档（滚动）日志文件输出，接收warn以及以上级别的日志信息 -->
        <rollingRandomAccessFile name="rollingWarnFile" fileName="${LOG_PATH}/warn.log" filePattern="${LOG_PATH}/warn/${LOG_NAME}-warn-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <patternLayout charset="${CHARSET}" pattern="${LOG_PATTERN}" />
            <Policies>
                <OnStartupTriggeringPolicy />
                <TimeBasedTriggeringPolicy interval="${ROLLING_INTERVAL}"/>
                <SizeBasedTriggeringPolicy size="${LOG_FILE_MAX_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="${LOG_FILE_MAX_COUNT}"/>
        </rollingRandomAccessFile>
    </appenders>

    <!-- loggers节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等 。-->
    <!-- 然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>

        <!-- 若是additivity设为false，则 该logger的日志 只会在自己的appender里输出，而不会在 父节点 的appender里输出。-->
        <logger name="org.example" level="info" additivity="false">
            <!-- 配置多个输出源，区分不同级别的日志信息，以便在大量日志信息中快速定位关键信息 -->
            <appenderRef ref="rollingInfoFile"/>
            <appenderRef ref="rollingWarnFile"/>
            <appenderRef ref="console"/>
        </logger>

        <!-- root节点用来指定项目的根日志，如果没有单独指定logger，那么就会默认使用该root日志输出 -->
        <root level="info">
            <appenderRef ref="console"/>
        </root>
    </loggers>
</configuration>
